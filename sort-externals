#!/usr/bin/env python
import subprocess, git, os, externals, tempfile

URL_PREFIXES = [ "http://www.studentrobotics.org/svn",
                 "http://svn.studentrobotics.org",
                 "https://www.studentrobotics.org/svn",
                 "file:///home/rob/sr/dev/git-migration/svn" ]

def remove_prefix(url):
    for p in URL_PREFIXES:
        if url[:len(p)] == p:
            prefix = p
            break

    url = url[len(prefix):]
    return url

def extract_svn_revpath(commit):
    msg = commit.message

    svn_line = msg[ msg.rfind("\n"): ].strip()
    assert "git-svn-id: " in svn_line

    url = svn_line.split()[1]

    path = remove_prefix(url)

    rev = int(path[ path.find("@")+1: ])
    path = path[:path.find("@")]

    return (path, rev)

def find_rev():
    repo = git.Repo("./")
    chash = os.getenv( "GIT_COMMIT" )
    commit = repo.commit( chash )
    path, rev = extract_svn_revpath(commit)

    return rev

def translate_repo(url):
    "Translate the given subversion URL into a git repo"
    path = remove_prefix(url)
    
    for repo in externals.repos:
        if repo.svn_path == path[:len(repo.svn_path)]:
            p = path[len(repo.svn_path):]
            if p == "":
                p = "/"
            return (repo.path, p)
    assert False

def find_relative_loc(otherrepo):
    # WARNING: HARD-CODED
    mydir = "userman.git"

    my = mydir.count("/")
    #oy = otherrepo.count("/")
    loc = "../" * (my+1) + otherrepo
    print "Location:", loc
    return loc

def mangle_git_tree( basehash, exthash, path ):
    # Here lies git fu.
    # We don't currently support externals in subdirectories
    assert "/" not in path
    tmpfd, treefname = tempfile.mkstemp()
    treef = os.fdopen(tmpfd, "w")

    # Get the current tree
    p = subprocess.Popen( args = "git ls-tree %s" % basehash,
                          stdout = subprocess.PIPE,
                          shell = True )
    r = p.communicate()
    p.wait()

    for entry in r[0].splitlines():
        objperm, objtype, objhash, objname = entry.split()

        if objtype == "commit" and objname == path:
            "Ignore our tree line, it'll be written in a mo"
            continue

        if objtype == "tree" and objname == path:
            "Ignore a directory with the same name as our external"
            continue

        treef.write( "%s\n" % entry )

    treeline = "160000 commit %s\t%s\n" % ( exthash, path )
    treef.write( treeline )
    treef.close()

    print "Tree before:\n"
    subprocess.Popen( args = "git ls-tree %s" % basehash, shell = True ).wait()
    print
    print "Tree after:\n"
    subprocess.Popen( args = "cat %s" % treefname, shell = True ).wait()
    print

    # Make a tree object:
    print "Making new tree."
    p = subprocess.Popen( args = "cat %s | git mktree --missing" % treefname,
                          shell = True,
                          stdout = subprocess.PIPE )
    treeobj = p.communicate()[0].strip()
    p.wait()
    os.remove(treefname)

    print "Created tree object %s" % treeobj
    return treeobj



p = subprocess.Popen( args = "git svn show-externals",
                      stdout = subprocess.PIPE,
                      shell = True )

r = p.communicate()
p.wait()

newsub = not os.path.exists(".gitmodules")
gitmodules = None

for l in r[0].splitlines():
    # Ignore externals lines that begin with #
    if len(l) == 0 or l[0] == '#':
        continue

    if gitmodules == None:
        gitmodules = open(".gitmodules", "w")

    print
    print "External:", l

    v = l.split()
    # We don't actually support specified revisions right now :-P
    assert len(v) == 2

    path, url = v
    rev = find_rev()

    if path[0] == "/":
        path = path[1:]

    reponame, repopath = translate_repo( url )

    # rev: The current subversion revision
    # path: The path that the external is checked out into
    # reponame: The external git repository (e.g. srusers.git)
    # repopath: The path within the original subversion external (e.g. /tags/v0.01)

    print "rev:", rev
    print "path:", path
    print "repopath:", repopath

    exthash = externals.find_chash( reponame, repopath, rev )
    print "hash:", exthash

    print
    print

    treeobj = mangle_git_tree( os.getenv("GIT_COMMIT"), exthash, path )

    # Read the tree object into the index 
    print "Reading tree into index."
    subprocess.Popen( args = "git read-tree %s" % treeobj, shell = True ).wait()
    print "Checking out new tree."
    subprocess.Popen( args = "git checkout-index %s" % path, shell = True ).wait()    

    # Add to the gitmodules file:
    gitmodules.write( """[submodule "%s"]
	path = %s
	url = %s
""" % ( path, path, find_relative_loc(reponame) ) )

print
print
print
print
